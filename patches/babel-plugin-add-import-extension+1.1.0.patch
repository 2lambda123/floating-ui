diff --git a/node_modules/babel-plugin-add-import-extension/src/plugin.js b/node_modules/babel-plugin-add-import-extension/src/plugin.js
index b7d0137..ef52b12 100644
--- a/node_modules/babel-plugin-add-import-extension/src/plugin.js
+++ b/node_modules/babel-plugin-add-import-extension/src/plugin.js
@@ -1,5 +1,5 @@
 const { declare } = require('@babel/helper-plugin-utils')
-const { types: { importDeclaration, stringLiteral }} = require('@babel/core')
+const { types: { importDeclaration, exportNamedDeclaration, exportAllDeclaration, stringLiteral }} = require('@babel/core')
 const { lstatSync } = require('fs')
 const { resolve, extname, dirname } = require('path')
 
@@ -51,6 +51,47 @@ module.exports = declare((api, options) => {
           }
         }
       },
-    },
+      ExportNamedDeclaration(path, state) {
+        if (!path.node.source) {
+          return
+        }
+
+        const module = path.node.source.value
+
+        if (skipModule(module)) {
+          return
+        }
+
+        const { filename, cwd } = state.file.opts
+        const dir = dirname(filename)
+        if (module[0] === '.') {
+          if (isDirectory(resolve(dir, module))) {
+            path.replaceWith(exportNamedDeclaration(path.node.declaration, path.node.specifiers, stringLiteral(`${module}/index.${extension}`)))
+          } else {
+            path.replaceWith(exportNamedDeclaration(path.node.declaration, path.node.specifiers, stringLiteral(`${module}.${extension}`)))
+          }
+        }
+      },
+      ExportAllDeclaration(path, state) {
+        if (!path.node.source) {
+          return
+        }
+        const module = path.node.source.value;
+
+        if (skipModule(module)) {
+          return
+        }
+
+        const { filename, cwd } = state.file.opts
+        const dir = dirname(filename)
+        if (module[0] === '.') {
+          if (isDirectory(resolve(dir, module))) {
+            path.replaceWith(exportAllDeclaration(stringLiteral(`${module}/index.${extension}`)))
+          } else {
+            path.replaceWith(exportAllDeclaration(stringLiteral(`${module}.${extension}`)))
+          }
+        }
+      }
+    }
   }
 })
